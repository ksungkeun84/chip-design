--------------------------------------------------------------------------------
--
--       This confidential and proprietary software may be used only
--     as authorized by a licensing agreement from Synopsys Inc.
--     In the event of publication, the following notice is applicable:
--
--                    (C) COPYRIGHT 1999 - 2018 SYNOPSYS INC.
--                           ALL RIGHTS RESERVED
--
--       The entire notice above must be reproduced on all authorized
--     copies.
--
-- AUTHOR:    Jay Zhu  August 18, 1999
--
-- VERSION:   VHDL Simulation Model
--
-- DesignWare_version: 0881cfef
-- DesignWare_release: O-2018.06-DWBB_201806.3
--
--------------------------------------------------------------------------------
--
-- MODIFICATIONS:
--      2/11/15 RJK
--      Updated model to eliminate derived reset and enable signals
--
--      8/23/04 RJK
--      Corrected interpretation of coding versus RD error
--      in separate output flags (code_err vs. rd_err)
--      STAR #9000024623
--
--      8/18/04 Doug Lee
--      Enhancement : Added init_mode parameter
--
--	RJK 11/21/2002 added enable and separate code
--	and RD error outputs
---------------------------------------------------------------

---------------------------------------------------------------
--
-- ABSTRACT: 8b10b decoder
--	Parameters:
--		bytes : Number of bytes to decode.
--		k28_5_only : Special character subset control
--			parameter (0 for all special characters
--			decoded, 1 for only K28.5 decoded [when
--			k_char=HIGH implies K28.5, all other special
--			characters indicate a code error])
--		en_mode : 0 => enable not connected (backward campat.)
--			  1 => enable=0 stalls decoder
--              init_mode : during initialization the method in which
--                          input init_rd_val is applied to data_in.
--			      0 => init_rd_val input is registered
--			           before being applied to data in
-- 			      1 => init_rd_val input is not registered
--		rst_mode : 0 => use asynchronous reset
--			   1 => use synchronous reset
--              op_iso_mode : Operand Isolation mode
--                            '0': Follow intent defined by Power Compiler user setting
--                            '1': no isolation
--                            '2': 'and' gate isolation
--                            '3': 'or' gate isolation
--                            '4': preferred isolation style: 'or' gate
--
--	Inputs:
--		clk : 	Clock
--		rst_n :	Asynchronous reset, active low
--		init_rd_n : Synchronous initialization, active low
--		init_rd_val : Value of initial running disparity
--		data_in : Input data for decoding, normally should be
--			8b10b encoded data
--	Outputs:
--		error : Error output indicator, active high
--		rd :	Current running disparity (after decoding data
--			presented at data_in)
--		k_char : Special character indicators (one indicator
--			per decoded byte)
--		data_out : decoded output data
--		rd_err : Running disparity Error
--		code_err : Coding error
--	Input:
--		enable : Enables register clocking
--
-- MODIFIED:
--      DLL 02/19/2008 added 'op_iso_mode' parameter and checking logic.
--
--      RJK 10/06/2008 Added rst_mode parameter to select reset type
--                     (STAR 9000270234)
--
---------------------------------------------------------------
library	IEEE, DWARE;
use IEEE.std_logic_1164.all;
use IEEE.std_logic_arith.all;
use DWARE.DWpackages.all;

architecture sim of DW_8b10b_dec is
	

-- pragma translate_off


type dec_6_to_5_tbl_T0 is array (0 to 1) of std_logic_vector(5 downto 0);
type dec_6_to_5_tbl_T is array (0 to 63) of dec_6_to_5_tbl_T0;

constant dec_6_to_5_tbl : dec_6_to_5_tbl_T := (
    ("101000",    "101000"),
    ("100000",    "100000"),
    ("000000",    "000000"),
    ("100100",    "100100"),
    ("100000",    "100000"),
    ("101110",    "101110"),
    ("010000",    "010000"),
    ("001111",    "001111"),
    ("010010",    "010010"),
    ("110110",    "110110"),
    ("001000",    "001000"),
    ("101000",    "101001"),
    ("110000",    "110000"),
    ("011000",    "011001"),
    ("111000",    "111001"),
    ("111001",    "111001"),
    ("111000",    "111000"),
    ("111010",    "111010"),
    ("000100",    "000100"),
    ("100100",    "100101"),
    ("111110",    "111110"),
    ("010100",    "010101"),
    ("110100",    "110101"),
    ("011111",    "011111"),
    ("000000",    "000000"),
    ("001100",    "001101"),
    ("101100",    "101101"),
    ("100001",    "100001"),
    ("011100",    "011101"),
    ("000011",    "000011"),
    ("111101",    "111101"),
    ("111011",    "111011"),
    ("101000",    "101000"),
    ("111100",    "111100"),
    ("000010",    "000010"),
    ("100010",    "100011"),
    ("100000",    "100000"),
    ("010010",    "010011"),
    ("110010",    "110011"),
    ("000001",    "000001"),
    ("011110",    "011110"),
    ("001010",    "001011"),
    ("101010",    "101011"),
    ("111111",    "111111"),
    ("011010",    "011011"),
    ("000101",    "000101"),
    ("111011",    "111011"),
    ("111101",    "111101"),
    ("111000",    "111000"),
    ("000110",    "000111"),
    ("100110",    "100111"),
    ("110001",    "110001"),
    ("010110",    "010111"),
    ("001001",    "001001"),
    ("110111",    "110111"),
    ("111001",    "111001"),
    ("001110",    "001110"),
    ("010001",    "010001"),
    ("101111",    "101111"),
    ("110101",    "110101"),
    ("011111",    "011111"),
    ("011111",    "011111"),
    ("111111",    "111111"),
    ("111111",    "111111") );



type dec_4_to_3_tbl_T0 is array (0 to 1) of std_logic_vector(3 downto 0);
type dec_4_to_3_tbl_T is array (0 to 15) of dec_4_to_3_tbl_T0;

constant dec_4_to_3_tbl : dec_4_to_3_tbl_T := (
    ("1010",     "1010"),
    ("1110",     "1110"),
    ("1000",     "1000"),
    ("0111",     "0111"),
    ("0000",     "0000"),
    ("0100",     "0101"),
    ("1100",     "1101"),
    ("1111",     "1111"),
    ("1110",     "1110"),
    ("0010",     "0011"),
    ("1010",     "1011"),
    ("0001",     "0001"),
    ("0110",     "0110"),
    ("1001",     "1001"),
    ("1111",     "1111"),
    ("1101",     "1101")
	);



type any_error_T0 is array (3 downto 0) of std_logic;
type any_error_T is array (0 to 1023) of any_error_T0;
constant any_error : any_error_T := (
   ('1', '0', '1', '1'),
   ('1', '0', '1', '1'),
   ('1', '0', '1', '1'),
   ('1', '0', '1', '1'),
   ('1', '0', '1', '1'),
   ('1', '0', '1', '1'),
   ('1', '0', '1', '1'),
   ('1', '0', '1', '1'),
   ('1', '0', '1', '1'),
   ('1', '0', '1', '1'),
   ('1', '0', '1', '1'),
   ('1', '0', '1', '1'),
   ('1', '0', '1', '1'),
   ('1', '0', '1', '1'),
   ('1', '0', '1', '1'),
   ('1', '0', '1', '1'),
   ('1', '0', '1', '1'),
   ('1', '0', '1', '1'),
   ('1', '0', '1', '1'),
   ('1', '0', '1', '1'),
   ('1', '0', '1', '1'),
   ('1', '0', '1', '1'),
   ('1', '0', '1', '1'),
   ('1', '0', '1', '1'),
   ('1', '0', '1', '1'),
   ('1', '0', '1', '1'),
   ('1', '0', '1', '1'),
   ('1', '0', '1', '1'),
   ('1', '0', '1', '1'),
   ('1', '0', '1', '1'),
   ('1', '0', '1', '1'),
   ('1', '0', '1', '1'),
   ('1', '0', '1', '1'),
   ('1', '0', '1', '1'),
   ('1', '0', '1', '1'),
   ('1', '0', '1', '1'),
   ('1', '0', '1', '1'),
   ('1', '0', '1', '1'),
   ('1', '0', '1', '1'),
   ('1', '0', '1', '1'),
   ('1', '0', '1', '1'),
   ('1', '0', '1', '1'),
   ('1', '0', '1', '1'),
   ('1', '0', '1', '1'),
   ('1', '0', '1', '1'),
   ('1', '0', '1', '1'),
   ('1', '0', '1', '1'),
   ('1', '0', '1', '1'),
   ('1', '0', '1', '1'),
   ('1', '0', '1', '1'),
   ('1', '0', '1', '1'),
   ('1', '0', '1', '1'),
   ('1', '0', '1', '1'),
   ('1', '0', '1', '1'),
   ('1', '0', '1', '1'),
   ('1', '0', '1', '1'),
   ('1', '0', '1', '1'),
   ('1', '0', '1', '1'),
   ('1', '0', '1', '1'),
   ('1', '0', '1', '1'),
   ('1', '0', '1', '1'),
   ('1', '0', '1', '1'),
   ('1', '0', '1', '1'),
   ('1', '0', '1', '1'),
   ('1', '0', '1', '1'),
   ('1', '0', '1', '1'),
   ('1', '0', '1', '1'),
   ('1', '0', '1', '1'),
   ('1', '0', '1', '1'),
   ('1', '0', '1', '1'),
   ('1', '0', '1', '1'),
   ('1', '0', '1', '1'),
   ('1', '0', '1', '1'),
   ('1', '0', '1', '1'),
   ('1', '0', '1', '1'),
   ('1', '0', '1', '1'),
   ('1', '0', '1', '1'),
   ('1', '0', '1', '1'),
   ('1', '0', '1', '1'),
   ('1', '0', '1', '1'),
   ('1', '0', '1', '1'),
   ('1', '0', '1', '1'),
   ('1', '0', '1', '1'),
   ('1', '0', '1', '1'),
   ('1', '0', '1', '1'),
   ('0', '0', '0', '1'),
   ('0', '0', '0', '1'),
   ('0', '0', '0', '1'),
   ('1', '0', '1', '1'),
   ('0', '0', '0', '1'),
   ('0', '0', '0', '1'),
   ('0', '0', '0', '1'),
   ('0', '0', '0', '1'),
   ('0', '0', '0', '1'),
   ('0', '0', '0', '1'),
   ('1', '0', '1', '1'),
   ('1', '0', '1', '1'),
   ('1', '0', '1', '1'),
   ('1', '0', '1', '1'),
   ('1', '0', '1', '1'),
   ('1', '0', '1', '1'),
   ('0', '0', '0', '1'),
   ('0', '0', '0', '1'),
   ('1', '0', '1', '1'),
   ('1', '0', '1', '1'),
   ('0', '0', '0', '1'),
   ('0', '0', '0', '1'),
   ('0', '0', '0', '1'),
   ('0', '0', '0', '1'),
   ('0', '0', '0', '1'),
   ('0', '0', '0', '1'),
   ('1', '0', '1', '1'),
   ('1', '0', '1', '1'),
   ('0', '0', '0', '1'),
   ('0', '0', '0', '1'),
   ('0', '0', '0', '1'),
   ('0', '0', '0', '1'),
   ('0', '0', '0', '1'),
   ('0', '0', '0', '1'),
   ('1', '0', '1', '1'),
   ('1', '0', '1', '1'),
   ('0', '0', '0', '1'),
   ('0', '0', '0', '1'),
   ('1', '0', '1', '1'),
   ('1', '0', '1', '1'),
   ('1', '0', '1', '1'),
   ('1', '0', '1', '1'),
   ('1', '0', '1', '1'),
   ('1', '0', '1', '1'),
   ('1', '0', '1', '1'),
   ('1', '0', '1', '1'),
   ('1', '0', '1', '1'),
   ('1', '0', '1', '1'),
   ('1', '0', '1', '1'),
   ('1', '0', '1', '1'),
   ('1', '0', '1', '1'),
   ('1', '0', '1', '1'),
   ('1', '0', '1', '1'),
   ('1', '0', '1', '1'),
   ('1', '0', '1', '1'),
   ('1', '0', '1', '1'),
   ('1', '0', '1', '1'),
   ('1', '0', '1', '1'),
   ('1', '0', '1', '1'),
   ('1', '0', '1', '1'),
   ('1', '0', '1', '1'),
   ('1', '0', '1', '1'),
   ('1', '0', '1', '1'),
   ('1', '0', '1', '1'),
   ('0', '0', '0', '1'),
   ('0', '0', '0', '1'),
   ('0', '0', '0', '1'),
   ('1', '0', '1', '1'),
   ('0', '0', '0', '1'),
   ('0', '0', '0', '1'),
   ('0', '0', '0', '1'),
   ('0', '0', '0', '1'),
   ('0', '0', '0', '1'),
   ('0', '0', '0', '1'),
   ('1', '0', '1', '1'),
   ('1', '0', '1', '1'),
   ('1', '0', '1', '1'),
   ('1', '0', '1', '1'),
   ('1', '0', '1', '1'),
   ('1', '0', '1', '1'),
   ('0', '0', '0', '1'),
   ('0', '0', '0', '1'),
   ('1', '0', '1', '1'),
   ('1', '0', '1', '1'),
   ('0', '0', '0', '1'),
   ('0', '0', '0', '1'),
   ('0', '0', '0', '1'),
   ('0', '0', '0', '1'),
   ('0', '0', '0', '1'),
   ('0', '0', '0', '1'),
   ('1', '0', '1', '1'),
   ('1', '0', '1', '1'),
   ('0', '0', '0', '1'),
   ('0', '0', '0', '1'),
   ('0', '0', '0', '1'),
   ('0', '0', '0', '1'),
   ('0', '0', '0', '0'),
   ('0', '0', '0', '0'),
   ('0', '1', '0', '0'),
   ('1', '0', '1', '1'),
   ('0', '0', '0', '0'),
   ('0', '0', '0', '0'),
   ('0', '1', '0', '0'),
   ('0', '1', '0', '0'),
   ('0', '1', '0', '0'),
   ('1', '1', '1', '0'),
   ('1', '1', '1', '0'),
   ('1', '0', '1', '1'),
   ('1', '0', '1', '1'),
   ('1', '0', '1', '1'),
   ('1', '0', '1', '1'),
   ('1', '0', '1', '1'),
   ('0', '0', '0', '1'),
   ('0', '0', '0', '1'),
   ('1', '0', '1', '1'),
   ('1', '0', '1', '1'),
   ('0', '0', '0', '1'),
   ('0', '0', '0', '1'),
   ('0', '0', '0', '1'),
   ('0', '0', '0', '1'),
   ('0', '0', '0', '1'),
   ('0', '0', '0', '1'),
   ('1', '0', '1', '1'),
   ('1', '0', '1', '1'),
   ('0', '0', '0', '1'),
   ('0', '0', '0', '1'),
   ('0', '0', '0', '1'),
   ('0', '0', '0', '1'),
   ('0', '0', '0', '0'),
   ('0', '0', '0', '0'),
   ('1', '1', '1', '0'),
   ('1', '0', '1', '1'),
   ('0', '0', '0', '0'),
   ('0', '0', '0', '0'),
   ('0', '1', '0', '0'),
   ('0', '1', '0', '0'),
   ('0', '1', '0', '0'),
   ('0', '1', '0', '0'),
   ('1', '1', '1', '0'),
   ('1', '0', '1', '1'),
   ('0', '0', '0', '1'),
   ('0', '0', '0', '1'),
   ('0', '0', '0', '1'),
   ('0', '0', '0', '1'),
   ('0', '0', '0', '0'),
   ('0', '0', '0', '0'),
   ('1', '1', '1', '0'),
   ('1', '0', '1', '1'),
   ('0', '0', '0', '0'),
   ('0', '0', '0', '0'),
   ('0', '1', '0', '0'),
   ('0', '1', '0', '0'),
   ('0', '1', '0', '0'),
   ('0', '1', '0', '0'),
   ('1', '1', '1', '0'),
   ('1', '1', '1', '0'),
   ('1', '1', '1', '0'),
   ('0', '1', '0', '0'),
   ('0', '1', '0', '0'),
   ('0', '1', '0', '0'),
   ('0', '1', '0', '0'),
   ('0', '1', '0', '0'),
   ('1', '1', '1', '0'),
   ('0', '1', '0', '0'),
   ('0', '1', '0', '0'),
   ('0', '1', '0', '0'),
   ('1', '1', '1', '0'),
   ('1', '1', '1', '0'),
   ('1', '1', '1', '0'),
   ('1', '1', '1', '0'),
   ('1', '1', '1', '0'),
   ('1', '0', '1', '1'),
   ('1', '0', '1', '1'),
   ('1', '0', '1', '1'),
   ('1', '0', '1', '1'),
   ('1', '0', '1', '1'),
   ('1', '0', '1', '1'),
   ('1', '0', '1', '1'),
   ('1', '0', '1', '1'),
   ('1', '0', '1', '1'),
   ('1', '0', '1', '1'),
   ('1', '0', '1', '1'),
   ('1', '0', '1', '1'),
   ('1', '0', '1', '1'),
   ('1', '0', '1', '1'),
   ('1', '0', '1', '1'),
   ('1', '0', '1', '1'),
   ('1', '0', '1', '1'),
   ('1', '0', '1', '1'),
   ('1', '0', '1', '1'),
   ('1', '0', '1', '1'),
   ('1', '0', '1', '1'),
   ('0', '0', '0', '1'),
   ('0', '0', '0', '1'),
   ('0', '0', '0', '1'),
   ('1', '0', '1', '1'),
   ('0', '0', '0', '1'),
   ('0', '0', '0', '1'),
   ('0', '0', '0', '1'),
   ('0', '0', '0', '1'),
   ('0', '0', '0', '1'),
   ('0', '0', '0', '1'),
   ('1', '0', '1', '1'),
   ('1', '0', '1', '1'),
   ('1', '0', '1', '1'),
   ('1', '0', '1', '1'),
   ('1', '0', '1', '1'),
   ('1', '0', '1', '1'),
   ('0', '0', '0', '1'),
   ('0', '0', '0', '1'),
   ('1', '0', '1', '1'),
   ('1', '0', '1', '1'),
   ('0', '0', '0', '1'),
   ('0', '0', '0', '1'),
   ('0', '0', '0', '1'),
   ('0', '0', '0', '1'),
   ('0', '0', '0', '1'),
   ('0', '0', '0', '1'),
   ('1', '0', '1', '1'),
   ('1', '0', '1', '1'),
   ('0', '0', '0', '1'),
   ('0', '0', '0', '1'),
   ('0', '0', '0', '1'),
   ('0', '0', '0', '1'),
   ('0', '0', '0', '0'),
   ('0', '0', '0', '0'),
   ('0', '1', '0', '0'),
   ('1', '0', '1', '1'),
   ('0', '0', '0', '0'),
   ('0', '0', '0', '0'),
   ('0', '1', '0', '0'),
   ('0', '1', '0', '0'),
   ('0', '1', '0', '0'),
   ('1', '1', '1', '0'),
   ('1', '1', '1', '0'),
   ('1', '0', '1', '1'),
   ('1', '0', '1', '1'),
   ('1', '0', '1', '1'),
   ('1', '0', '1', '1'),
   ('1', '0', '1', '1'),
   ('0', '0', '0', '1'),
   ('0', '0', '0', '1'),
   ('1', '0', '1', '1'),
   ('1', '0', '1', '1'),
   ('0', '0', '0', '1'),
   ('0', '0', '0', '1'),
   ('0', '0', '0', '1'),
   ('0', '0', '0', '1'),
   ('0', '0', '0', '1'),
   ('0', '0', '0', '1'),
   ('1', '0', '1', '1'),
   ('1', '0', '1', '1'),
   ('0', '0', '0', '1'),
   ('0', '0', '0', '1'),
   ('0', '0', '0', '1'),
   ('0', '0', '0', '1'),
   ('0', '0', '0', '0'),
   ('0', '0', '0', '0'),
   ('1', '1', '1', '0'),
   ('1', '0', '1', '1'),
   ('0', '0', '0', '0'),
   ('0', '0', '0', '0'),
   ('0', '1', '0', '0'),
   ('0', '1', '0', '0'),
   ('0', '1', '0', '0'),
   ('0', '1', '0', '0'),
   ('1', '1', '1', '0'),
   ('1', '0', '1', '1'),
   ('0', '0', '0', '1'),
   ('0', '0', '0', '1'),
   ('0', '0', '0', '1'),
   ('0', '0', '0', '1'),
   ('0', '0', '0', '0'),
   ('0', '0', '0', '0'),
   ('1', '1', '1', '0'),
   ('1', '0', '1', '1'),
   ('0', '0', '0', '0'),
   ('0', '0', '0', '0'),
   ('0', '1', '0', '0'),
   ('0', '1', '0', '0'),
   ('0', '1', '0', '0'),
   ('0', '1', '0', '0'),
   ('1', '1', '1', '0'),
   ('1', '1', '1', '0'),
   ('0', '1', '0', '0'),
   ('0', '1', '0', '0'),
   ('0', '1', '0', '0'),
   ('0', '1', '0', '0'),
   ('0', '1', '0', '0'),
   ('0', '1', '0', '0'),
   ('1', '1', '1', '0'),
   ('1', '1', '1', '0'),
   ('0', '1', '0', '0'),
   ('0', '1', '0', '0'),
   ('1', '1', '1', '0'),
   ('1', '1', '1', '0'),
   ('1', '1', '1', '0'),
   ('1', '1', '1', '0'),
   ('1', '1', '1', '0'),
   ('1', '0', '1', '1'),
   ('1', '0', '1', '1'),
   ('1', '0', '1', '1'),
   ('1', '0', '1', '1'),
   ('1', '0', '1', '1'),
   ('0', '0', '0', '1'),
   ('0', '0', '0', '1'),
   ('1', '0', '1', '1'),
   ('1', '0', '1', '1'),
   ('0', '0', '0', '1'),
   ('0', '0', '0', '1'),
   ('0', '0', '0', '1'),
   ('0', '0', '0', '1'),
   ('0', '0', '0', '1'),
   ('0', '0', '0', '1'),
   ('1', '0', '1', '1'),
   ('1', '0', '1', '1'),
   ('0', '0', '0', '1'),
   ('0', '0', '0', '1'),
   ('0', '0', '0', '1'),
   ('0', '0', '0', '1'),
   ('0', '0', '0', '0'),
   ('0', '0', '0', '0'),
   ('1', '1', '1', '0'),
   ('1', '0', '1', '1'),
   ('0', '0', '0', '0'),
   ('0', '0', '0', '0'),
   ('0', '1', '0', '0'),
   ('0', '1', '0', '0'),
   ('0', '1', '0', '0'),
   ('0', '1', '0', '0'),
   ('1', '1', '1', '0'),
   ('1', '0', '1', '1'),
   ('0', '0', '0', '1'),
   ('0', '0', '0', '1'),
   ('0', '0', '0', '1'),
   ('0', '0', '0', '1'),
   ('0', '0', '0', '0'),
   ('0', '0', '0', '0'),
   ('1', '1', '1', '0'),
   ('1', '0', '1', '1'),
   ('0', '0', '0', '0'),
   ('0', '0', '0', '0'),
   ('0', '1', '0', '0'),
   ('0', '1', '0', '0'),
   ('0', '1', '0', '0'),
   ('0', '1', '0', '0'),
   ('1', '1', '1', '0'),
   ('1', '1', '1', '0'),
   ('0', '1', '0', '0'),
   ('0', '1', '0', '0'),
   ('0', '1', '0', '0'),
   ('0', '1', '0', '0'),
   ('0', '1', '0', '0'),
   ('0', '1', '0', '0'),
   ('1', '1', '1', '0'),
   ('1', '1', '1', '0'),
   ('0', '1', '0', '0'),
   ('0', '1', '0', '0'),
   ('1', '1', '1', '0'),
   ('1', '1', '1', '0'),
   ('1', '1', '1', '0'),
   ('1', '1', '1', '0'),
   ('1', '1', '1', '0'),
   ('1', '0', '1', '1'),
   ('1', '0', '1', '1'),
   ('0', '0', '0', '1'),
   ('0', '0', '0', '1'),
   ('0', '0', '0', '1'),
   ('0', '0', '0', '0'),
   ('0', '0', '0', '0'),
   ('1', '1', '1', '0'),
   ('0', '0', '0', '1'),
   ('0', '0', '0', '0'),
   ('0', '0', '0', '0'),
   ('0', '1', '0', '0'),
   ('0', '1', '0', '0'),
   ('0', '1', '0', '0'),
   ('0', '1', '0', '0'),
   ('1', '1', '1', '0'),
   ('1', '1', '1', '0'),
   ('0', '1', '0', '0'),
   ('0', '1', '0', '0'),
   ('0', '1', '0', '0'),
   ('0', '1', '0', '0'),
   ('0', '1', '0', '0'),
   ('0', '1', '0', '0'),
   ('1', '1', '1', '0'),
   ('1', '1', '1', '0'),
   ('0', '1', '0', '0'),
   ('0', '1', '0', '0'),
   ('1', '1', '1', '0'),
   ('1', '1', '1', '0'),
   ('1', '1', '1', '0'),
   ('1', '1', '1', '0'),
   ('1', '1', '1', '0'),
   ('1', '1', '1', '0'),
   ('0', '1', '0', '0'),
   ('0', '1', '0', '0'),
   ('0', '1', '0', '0'),
   ('0', '1', '0', '0'),
   ('0', '1', '0', '0'),
   ('0', '1', '0', '0'),
   ('1', '1', '1', '0'),
   ('0', '1', '0', '0'),
   ('0', '1', '0', '0'),
   ('0', '1', '0', '0'),
   ('1', '1', '1', '0'),
   ('1', '1', '1', '0'),
   ('1', '1', '1', '0'),
   ('1', '1', '1', '0'),
   ('1', '1', '1', '0'),
   ('1', '1', '1', '0'),
   ('1', '1', '1', '0'),
   ('1', '1', '1', '0'),
   ('1', '1', '1', '0'),
   ('1', '1', '1', '0'),
   ('1', '1', '1', '0'),
   ('1', '1', '1', '0'),
   ('1', '1', '1', '0'),
   ('1', '1', '1', '0'),
   ('1', '1', '1', '0'),
   ('1', '1', '1', '0'),
   ('1', '1', '1', '0'),
   ('1', '1', '1', '0'),
   ('1', '1', '1', '0'),
   ('1', '1', '1', '0'),
   ('1', '1', '1', '0'),
   ('1', '0', '1', '1'),
   ('1', '0', '1', '1'),
   ('1', '0', '1', '1'),
   ('1', '0', '1', '1'),
   ('1', '0', '1', '1'),
   ('1', '0', '1', '1'),
   ('1', '0', '1', '1'),
   ('1', '0', '1', '1'),
   ('1', '0', '1', '1'),
   ('1', '0', '1', '1'),
   ('1', '0', '1', '1'),
   ('1', '0', '1', '1'),
   ('1', '0', '1', '1'),
   ('1', '0', '1', '1'),
   ('1', '0', '1', '1'),
   ('1', '0', '1', '1'),
   ('1', '0', '1', '1'),
   ('1', '0', '1', '1'),
   ('1', '0', '1', '1'),
   ('1', '0', '1', '1'),
   ('1', '0', '1', '1'),
   ('0', '0', '0', '1'),
   ('0', '0', '0', '1'),
   ('0', '0', '0', '1'),
   ('1', '0', '1', '1'),
   ('0', '0', '0', '1'),
   ('0', '0', '0', '1'),
   ('0', '0', '0', '1'),
   ('0', '0', '0', '1'),
   ('0', '0', '0', '1'),
   ('0', '0', '0', '1'),
   ('1', '0', '1', '1'),
   ('1', '0', '1', '1'),
   ('1', '0', '1', '1'),
   ('1', '0', '1', '1'),
   ('1', '0', '1', '1'),
   ('1', '0', '1', '1'),
   ('0', '0', '0', '1'),
   ('0', '0', '0', '1'),
   ('1', '0', '1', '1'),
   ('1', '0', '1', '1'),
   ('0', '0', '0', '1'),
   ('0', '0', '0', '1'),
   ('0', '0', '0', '1'),
   ('0', '0', '0', '1'),
   ('0', '0', '0', '1'),
   ('0', '0', '0', '1'),
   ('1', '0', '1', '1'),
   ('1', '0', '1', '1'),
   ('0', '0', '0', '1'),
   ('0', '0', '0', '1'),
   ('0', '0', '0', '1'),
   ('0', '0', '0', '1'),
   ('0', '0', '0', '0'),
   ('0', '0', '0', '0'),
   ('0', '1', '0', '0'),
   ('1', '0', '1', '1'),
   ('0', '0', '0', '0'),
   ('0', '0', '0', '0'),
   ('0', '1', '0', '0'),
   ('0', '1', '0', '0'),
   ('0', '1', '0', '0'),
   ('1', '1', '1', '0'),
   ('1', '1', '1', '0'),
   ('1', '0', '1', '1'),
   ('1', '0', '1', '1'),
   ('1', '0', '1', '1'),
   ('1', '0', '1', '1'),
   ('1', '0', '1', '1'),
   ('0', '0', '0', '1'),
   ('0', '0', '0', '1'),
   ('1', '0', '1', '1'),
   ('1', '0', '1', '1'),
   ('0', '0', '0', '1'),
   ('0', '0', '0', '1'),
   ('0', '0', '0', '1'),
   ('0', '0', '0', '1'),
   ('0', '0', '0', '1'),
   ('0', '0', '0', '1'),
   ('1', '0', '1', '1'),
   ('1', '0', '1', '1'),
   ('0', '0', '0', '1'),
   ('0', '0', '0', '1'),
   ('0', '0', '0', '1'),
   ('0', '0', '0', '1'),
   ('0', '0', '0', '0'),
   ('0', '0', '0', '0'),
   ('1', '1', '1', '0'),
   ('1', '0', '1', '1'),
   ('0', '0', '0', '0'),
   ('0', '0', '0', '0'),
   ('0', '1', '0', '0'),
   ('0', '1', '0', '0'),
   ('0', '1', '0', '0'),
   ('0', '1', '0', '0'),
   ('1', '1', '1', '0'),
   ('1', '0', '1', '1'),
   ('0', '0', '0', '1'),
   ('0', '0', '0', '1'),
   ('0', '0', '0', '1'),
   ('0', '0', '0', '1'),
   ('0', '0', '0', '0'),
   ('0', '0', '0', '0'),
   ('1', '1', '1', '0'),
   ('1', '0', '1', '1'),
   ('0', '0', '0', '0'),
   ('0', '0', '0', '0'),
   ('0', '1', '0', '0'),
   ('0', '1', '0', '0'),
   ('0', '1', '0', '0'),
   ('0', '1', '0', '0'),
   ('1', '1', '1', '0'),
   ('1', '1', '1', '0'),
   ('0', '1', '0', '0'),
   ('0', '1', '0', '0'),
   ('0', '1', '0', '0'),
   ('0', '1', '0', '0'),
   ('0', '1', '0', '0'),
   ('0', '1', '0', '0'),
   ('1', '1', '1', '0'),
   ('1', '1', '1', '0'),
   ('0', '1', '0', '0'),
   ('0', '1', '0', '0'),
   ('1', '1', '1', '0'),
   ('1', '1', '1', '0'),
   ('1', '1', '1', '0'),
   ('1', '1', '1', '0'),
   ('1', '1', '1', '0'),
   ('1', '0', '1', '1'),
   ('1', '0', '1', '1'),
   ('1', '0', '1', '1'),
   ('1', '0', '1', '1'),
   ('1', '0', '1', '1'),
   ('0', '0', '0', '1'),
   ('0', '0', '0', '1'),
   ('1', '0', '1', '1'),
   ('1', '0', '1', '1'),
   ('0', '0', '0', '1'),
   ('0', '0', '0', '1'),
   ('0', '0', '0', '1'),
   ('0', '0', '0', '1'),
   ('0', '0', '0', '1'),
   ('0', '0', '0', '1'),
   ('1', '0', '1', '1'),
   ('1', '0', '1', '1'),
   ('0', '0', '0', '1'),
   ('0', '0', '0', '1'),
   ('0', '0', '0', '1'),
   ('0', '0', '0', '1'),
   ('0', '0', '0', '0'),
   ('0', '0', '0', '0'),
   ('1', '1', '1', '0'),
   ('1', '0', '1', '1'),
   ('0', '0', '0', '0'),
   ('0', '0', '0', '0'),
   ('0', '1', '0', '0'),
   ('0', '1', '0', '0'),
   ('0', '1', '0', '0'),
   ('0', '1', '0', '0'),
   ('1', '1', '1', '0'),
   ('1', '0', '1', '1'),
   ('0', '0', '0', '1'),
   ('0', '0', '0', '1'),
   ('0', '0', '0', '1'),
   ('0', '0', '0', '1'),
   ('0', '0', '0', '0'),
   ('0', '0', '0', '0'),
   ('1', '1', '1', '0'),
   ('1', '0', '1', '1'),
   ('0', '0', '0', '0'),
   ('0', '0', '0', '0'),
   ('0', '1', '0', '0'),
   ('0', '1', '0', '0'),
   ('0', '1', '0', '0'),
   ('0', '1', '0', '0'),
   ('1', '1', '1', '0'),
   ('1', '1', '1', '0'),
   ('0', '1', '0', '0'),
   ('0', '1', '0', '0'),
   ('0', '1', '0', '0'),
   ('0', '1', '0', '0'),
   ('0', '1', '0', '0'),
   ('0', '1', '0', '0'),
   ('1', '1', '1', '0'),
   ('1', '1', '1', '0'),
   ('0', '1', '0', '0'),
   ('0', '1', '0', '0'),
   ('1', '1', '1', '0'),
   ('1', '1', '1', '0'),
   ('1', '1', '1', '0'),
   ('1', '1', '1', '0'),
   ('1', '1', '1', '0'),
   ('1', '0', '1', '1'),
   ('1', '0', '1', '1'),
   ('0', '0', '0', '1'),
   ('0', '0', '0', '1'),
   ('0', '0', '0', '1'),
   ('0', '0', '0', '0'),
   ('0', '0', '0', '0'),
   ('1', '1', '1', '0'),
   ('0', '0', '0', '1'),
   ('0', '0', '0', '0'),
   ('0', '0', '0', '0'),
   ('0', '1', '0', '0'),
   ('0', '1', '0', '0'),
   ('0', '1', '0', '0'),
   ('0', '1', '0', '0'),
   ('1', '1', '1', '0'),
   ('1', '1', '1', '0'),
   ('0', '1', '0', '0'),
   ('0', '1', '0', '0'),
   ('0', '1', '0', '0'),
   ('0', '1', '0', '0'),
   ('0', '1', '0', '0'),
   ('0', '1', '0', '0'),
   ('1', '1', '1', '0'),
   ('1', '1', '1', '0'),
   ('0', '1', '0', '0'),
   ('0', '1', '0', '0'),
   ('1', '1', '1', '0'),
   ('1', '1', '1', '0'),
   ('1', '1', '1', '0'),
   ('1', '1', '1', '0'),
   ('1', '1', '1', '0'),
   ('1', '1', '1', '0'),
   ('0', '1', '0', '0'),
   ('0', '1', '0', '0'),
   ('0', '1', '0', '0'),
   ('0', '1', '0', '0'),
   ('0', '1', '0', '0'),
   ('0', '1', '0', '0'),
   ('1', '1', '1', '0'),
   ('0', '1', '0', '0'),
   ('0', '1', '0', '0'),
   ('0', '1', '0', '0'),
   ('1', '1', '1', '0'),
   ('1', '1', '1', '0'),
   ('1', '1', '1', '0'),
   ('1', '1', '1', '0'),
   ('1', '1', '1', '0'),
   ('1', '1', '1', '0'),
   ('1', '1', '1', '0'),
   ('1', '1', '1', '0'),
   ('1', '1', '1', '0'),
   ('1', '1', '1', '0'),
   ('1', '1', '1', '0'),
   ('1', '1', '1', '0'),
   ('1', '1', '1', '0'),
   ('1', '1', '1', '0'),
   ('1', '1', '1', '0'),
   ('1', '1', '1', '0'),
   ('1', '1', '1', '0'),
   ('1', '1', '1', '0'),
   ('1', '1', '1', '0'),
   ('1', '1', '1', '0'),
   ('1', '1', '1', '0'),
   ('1', '0', '1', '1'),
   ('1', '0', '1', '1'),
   ('1', '0', '1', '1'),
   ('1', '0', '1', '1'),
   ('1', '0', '1', '1'),
   ('0', '0', '0', '1'),
   ('0', '0', '0', '1'),
   ('0', '0', '0', '1'),
   ('1', '0', '1', '1'),
   ('0', '0', '0', '1'),
   ('0', '0', '0', '1'),
   ('0', '0', '0', '1'),
   ('0', '0', '0', '1'),
   ('0', '0', '0', '1'),
   ('1', '0', '1', '1'),
   ('1', '0', '1', '1'),
   ('1', '0', '1', '1'),
   ('0', '0', '0', '1'),
   ('0', '0', '0', '1'),
   ('0', '0', '0', '1'),
   ('0', '0', '0', '1'),
   ('0', '0', '0', '0'),
   ('0', '0', '0', '0'),
   ('1', '1', '1', '0'),
   ('1', '0', '1', '1'),
   ('0', '0', '0', '0'),
   ('0', '0', '0', '0'),
   ('0', '1', '0', '0'),
   ('0', '1', '0', '0'),
   ('0', '1', '0', '0'),
   ('0', '1', '0', '0'),
   ('1', '1', '1', '0'),
   ('1', '0', '1', '1'),
   ('0', '0', '0', '1'),
   ('0', '0', '0', '1'),
   ('0', '0', '0', '1'),
   ('0', '0', '0', '1'),
   ('0', '0', '0', '0'),
   ('0', '0', '0', '0'),
   ('1', '1', '1', '0'),
   ('1', '0', '1', '1'),
   ('0', '0', '0', '0'),
   ('0', '0', '0', '0'),
   ('0', '1', '0', '0'),
   ('0', '1', '0', '0'),
   ('0', '1', '0', '0'),
   ('0', '1', '0', '0'),
   ('1', '1', '1', '0'),
   ('1', '1', '1', '0'),
   ('0', '1', '0', '0'),
   ('0', '1', '0', '0'),
   ('0', '1', '0', '0'),
   ('0', '1', '0', '0'),
   ('0', '1', '0', '0'),
   ('0', '1', '0', '0'),
   ('1', '1', '1', '0'),
   ('1', '1', '1', '0'),
   ('0', '1', '0', '0'),
   ('0', '1', '0', '0'),
   ('1', '1', '1', '0'),
   ('1', '1', '1', '0'),
   ('1', '1', '1', '0'),
   ('1', '1', '1', '0'),
   ('1', '1', '1', '0'),
   ('1', '0', '1', '1'),
   ('1', '0', '1', '1'),
   ('0', '0', '0', '1'),
   ('0', '0', '0', '1'),
   ('0', '0', '0', '1'),
   ('0', '0', '0', '0'),
   ('0', '0', '0', '0'),
   ('1', '1', '1', '0'),
   ('0', '0', '0', '1'),
   ('0', '0', '0', '0'),
   ('0', '0', '0', '0'),
   ('0', '1', '0', '0'),
   ('0', '1', '0', '0'),
   ('0', '1', '0', '0'),
   ('0', '1', '0', '0'),
   ('1', '1', '1', '0'),
   ('1', '1', '1', '0'),
   ('0', '1', '0', '0'),
   ('0', '1', '0', '0'),
   ('0', '1', '0', '0'),
   ('0', '1', '0', '0'),
   ('0', '1', '0', '0'),
   ('0', '1', '0', '0'),
   ('1', '1', '1', '0'),
   ('1', '1', '1', '0'),
   ('0', '1', '0', '0'),
   ('0', '1', '0', '0'),
   ('1', '1', '1', '0'),
   ('1', '1', '1', '0'),
   ('1', '1', '1', '0'),
   ('1', '1', '1', '0'),
   ('1', '1', '1', '0'),
   ('1', '1', '1', '0'),
   ('0', '1', '0', '0'),
   ('0', '1', '0', '0'),
   ('0', '1', '0', '0'),
   ('0', '1', '0', '0'),
   ('0', '1', '0', '0'),
   ('0', '1', '0', '0'),
   ('1', '1', '1', '0'),
   ('0', '1', '0', '0'),
   ('0', '1', '0', '0'),
   ('0', '1', '0', '0'),
   ('1', '1', '1', '0'),
   ('1', '1', '1', '0'),
   ('1', '1', '1', '0'),
   ('1', '1', '1', '0'),
   ('1', '1', '1', '0'),
   ('1', '1', '1', '0'),
   ('1', '1', '1', '0'),
   ('1', '1', '1', '0'),
   ('1', '1', '1', '0'),
   ('1', '1', '1', '0'),
   ('1', '1', '1', '0'),
   ('1', '1', '1', '0'),
   ('1', '1', '1', '0'),
   ('1', '1', '1', '0'),
   ('1', '1', '1', '0'),
   ('1', '1', '1', '0'),
   ('1', '1', '1', '0'),
   ('1', '1', '1', '0'),
   ('1', '1', '1', '0'),
   ('1', '1', '1', '0'),
   ('1', '1', '1', '0'),
   ('1', '1', '1', '0'),
   ('1', '1', '1', '0'),
   ('1', '1', '1', '0'),
   ('1', '1', '1', '0'),
   ('1', '1', '1', '0'),
   ('0', '1', '0', '0'),
   ('0', '1', '0', '0'),
   ('1', '1', '1', '0'),
   ('1', '1', '1', '0'),
   ('0', '1', '0', '0'),
   ('0', '1', '0', '0'),
   ('0', '1', '0', '0'),
   ('0', '1', '0', '0'),
   ('0', '1', '0', '0'),
   ('0', '1', '0', '0'),
   ('1', '1', '1', '0'),
   ('1', '1', '1', '0'),
   ('0', '1', '0', '0'),
   ('0', '1', '0', '0'),
   ('0', '1', '0', '0'),
   ('0', '1', '0', '0'),
   ('0', '1', '0', '0'),
   ('0', '1', '0', '0'),
   ('1', '1', '1', '0'),
   ('1', '1', '1', '0'),
   ('0', '1', '0', '0'),
   ('0', '1', '0', '0'),
   ('1', '1', '1', '0'),
   ('1', '1', '1', '0'),
   ('1', '1', '1', '0'),
   ('1', '1', '1', '0'),
   ('1', '1', '1', '0'),
   ('1', '1', '1', '0'),
   ('0', '1', '0', '0'),
   ('0', '1', '0', '0'),
   ('0', '1', '0', '0'),
   ('0', '1', '0', '0'),
   ('0', '1', '0', '0'),
   ('0', '1', '0', '0'),
   ('1', '1', '1', '0'),
   ('0', '1', '0', '0'),
   ('0', '1', '0', '0'),
   ('0', '1', '0', '0'),
   ('1', '1', '1', '0'),
   ('1', '1', '1', '0'),
   ('1', '1', '1', '0'),
   ('1', '1', '1', '0'),
   ('1', '1', '1', '0'),
   ('1', '1', '1', '0'),
   ('1', '1', '1', '0'),
   ('1', '1', '1', '0'),
   ('1', '1', '1', '0'),
   ('1', '1', '1', '0'),
   ('1', '1', '1', '0'),
   ('1', '1', '1', '0'),
   ('1', '1', '1', '0'),
   ('1', '1', '1', '0'),
   ('1', '1', '1', '0'),
   ('1', '1', '1', '0'),
   ('1', '1', '1', '0'),
   ('1', '1', '1', '0'),
   ('1', '1', '1', '0'),
   ('1', '1', '1', '0'),
   ('1', '1', '1', '0'),
   ('1', '1', '1', '0'),
   ('1', '1', '1', '0'),
   ('1', '1', '1', '0'),
   ('1', '1', '1', '0'),
   ('1', '1', '1', '0'),
   ('1', '1', '1', '0'),
   ('1', '1', '1', '0'),
   ('1', '1', '1', '0'),
   ('1', '1', '1', '0'),
   ('1', '1', '1', '0'),
   ('1', '1', '1', '0'),
   ('1', '1', '1', '0'),
   ('1', '1', '1', '0'),
   ('1', '1', '1', '0'),
   ('1', '1', '1', '0'),
   ('1', '1', '1', '0'),
   ('1', '1', '1', '0'),
   ('1', '1', '1', '0'),
   ('1', '1', '1', '0'),
   ('1', '1', '1', '0'),
   ('1', '1', '1', '0'),
   ('1', '1', '1', '0'),
   ('1', '1', '1', '0'),
   ('1', '1', '1', '0'),
   ('1', '1', '1', '0'),
   ('1', '1', '1', '0'),
   ('1', '1', '1', '0'),
   ('1', '1', '1', '0'),
   ('1', '1', '1', '0'),
   ('1', '1', '1', '0'),
   ('1', '1', '1', '0'),
   ('1', '1', '1', '0'),
   ('1', '1', '1', '0'),
   ('1', '1', '1', '0'),
   ('1', '1', '1', '0'),
   ('1', '1', '1', '0'),
   ('1', '1', '1', '0'),
   ('1', '1', '1', '0'),
   ('1', '1', '1', '0'),
   ('1', '1', '1', '0'),
   ('1', '1', '1', '0'),
   ('1', '1', '1', '0'),
   ('1', '1', '1', '0'),
   ('1', '1', '1', '0'),
   ('1', '1', '1', '0'),
   ('1', '1', '1', '0'),
   ('1', '1', '1', '0'),
   ('1', '1', '1', '0'),
   ('1', '1', '1', '0'),
   ('1', '1', '1', '0'),
   ('1', '1', '1', '0'),
   ('1', '1', '1', '0'),
   ('1', '1', '1', '0'),
   ('1', '1', '1', '0'),
   ('1', '1', '1', '0'),
   ('1', '1', '1', '0'),
   ('1', '1', '1', '0'),
   ('1', '1', '1', '0'),
   ('1', '1', '1', '0'),
   ('1', '1', '1', '0'),
   ('1', '1', '1', '0'),
   ('1', '1', '1', '0'),
   ('1', '1', '1', '0'),
   ('1', '1', '1', '0')
);



function conv_std_logic_2_int(input_bit : std_logic)
	return	integer is
	variable rt_int : integer;
begin
	  if(input_bit = '0') then
	    rt_int := 0;
	  else
	    rt_int := 1;
	  end if;
	return rt_int;

end conv_std_logic_2_int;


function decode_10b_to_8b(
		abcdeifghj:	std_logic_vector(9 downto 0);
		RD_in:		std_logic;
		k28_5_only:	integer
		)
	return 		std_logic_vector is
	variable	HGFEDCBA : std_logic_vector(7 downto 0);
	variable	RD_out : std_logic;
	variable	error_out: std_logic;
	variable	rd_error_out: std_logic;
	variable	code_error_out: std_logic;
	variable	k_char : std_logic;
	variable	abcedi : integer;
	variable	EDCBA_r : std_logic_vector(5 downto 0);
	variable	EDCBA : std_logic_vector(4 downto 0);
	variable	intern_rd : natural range 0 to 1;
	variable	HGF : std_logic_vector(2 downto 0);
	variable	HGF_r : std_logic_vector(3 downto 0);
	variable	fghj : integer;
begin

	if (Is_X(abcdeifghj)) then
	  HGFEDCBA := (others => 'X');
	  RD_out := 'X';
	  error_out := 'X';
	  rd_error_out := 'X';
	  code_error_out := 'X';
	  k_char := 'X';

	else
	  
	  intern_rd := conv_std_logic_2_int(RD_in);
	  rd_error_out := any_error(CONV_INTEGER(UNSIGNED(abcdeifghj)))(intern_rd*2);
	  code_error_out := any_error(CONV_INTEGER(UNSIGNED(abcdeifghj)))(intern_rd*2+1);
	  error_out := rd_error_out OR code_error_out;

	  abcedi := CONV_INTEGER(UNSIGNED(abcdeifghj(9 downto 4)));
	  EDCBA_r := dec_6_to_5_tbl(abcedi)(intern_rd);
	  intern_rd := conv_std_logic_2_int(EDCBA_r(0));

	  fghj := CONV_INTEGER(UNSIGNED(abcdeifghj(3 downto 0)));
	  HGF_r := dec_4_to_3_tbl(fghj)(intern_rd);

	  case abcdeifghj is
	    when "1100000101" => HGF_r(3 downto 1) := "101";
	    when "1100000110" => HGF_r(3 downto 1) := "001";
	    when "1100001001" => HGF_r(3 downto 1) := "110";
	    when "1100001010" => HGF_r(3 downto 1) := "010";
	    when others =>
		null;
	  end case;


	  HGFEDCBA := HGF_r(3 downto 1) & EDCBA_r(5 downto 1);
	  RD_out := HGF_r(0);

	  if ((abcedi=15 AND (fghj>=2 AND fghj<=10 AND fghj /= 7)) OR
	      (abcedi=48 AND (fghj>=5 AND fghj<=13 AND fghj /= 8)) OR
	      ((abcedi = 58 OR abcedi = 54 OR abcedi = 46 OR
			abcedi = 30) AND fghj=8)		OR
	      ((abcedi = 5 OR abcedi = 9 OR abcedi = 17 OR
			abcedi = 33) AND fghj=7))
		  then

	    k_char := NOT code_error_out;

	    if ((k28_5_only = 1) AND (code_error_out = '0')) then
	      if (NOT ((abcedi = 15 AND fghj = 10) OR
	             (abcedi = 48 AND fghj = 5))) then
	        error_out := '1';
	        code_error_out := '1';
	        k_char := '0';
	      end if;
	    end if;
	  else
	    k_char := '0';
	  end if;

	end if;

	return (HGFEDCBA & RD_out & code_error_out & rd_error_out & k_char);

end decode_10b_to_8b;


function decode_10b_to_8b_x_rd_in(
		abcdeifghj:	std_logic_vector(9 downto 0);
		RD_in:		std_logic;
		k28_5_only:	integer
		)
	return 		std_logic_vector is
	variable	decode_10b_to_8b_rd_in0 :
				std_logic_vector(11 downto 0);
	variable	decode_10b_to_8b_rd_in1 :
				std_logic_vector(11 downto 0);
begin
	if (RD_in = '0' OR RD_in = '1') then
	  decode_10b_to_8b_rd_in0 := decode_10b_to_8b(abcdeifghj,
				RD_in, k28_5_only);
	else
	  decode_10b_to_8b_rd_in0 := decode_10b_to_8b(abcdeifghj,
				'0', k28_5_only);
	  decode_10b_to_8b_rd_in1 := decode_10b_to_8b(abcdeifghj,
				'1', k28_5_only);
	  for bit_idx in 11 downto 0 loop
	    if decode_10b_to_8b_rd_in0(bit_idx) /=
	       	decode_10b_to_8b_rd_in1(bit_idx) then
	      decode_10b_to_8b_rd_in0(bit_idx) := 'X';
	    end if;
	  end loop;
	end if;

	return decode_10b_to_8b_rd_in0;

end decode_10b_to_8b_x_rd_in;



signal	rd_int :	std_logic;

-- pragma translate_on

begin

-- pragma translate_off

GEN_RM_EQ_0_EM_EQ_0 : if (rst_mode = 0) AND (en_mode = 0) generate
  -- Asynch reset, no enable
  DECODER_TOP_LEVEL_AR_NE : process(clk, rst_n)
	variable tmp_rd :	std_logic;
	variable tmp_signal :	std_logic_vector(11 downto 0);
	variable error_int :	std_logic;
	variable rd_err_int :	std_logic;
	variable code_err_int :	std_logic;
	variable k_char_int :	std_logic_vector(bytes-1 downto 0);
	variable data_out_int : std_logic_vector(bytes*8-1 downto 0);
	variable rd_err_bus_tmp:std_logic_vector(bytes-1 downto 0);
	variable cd_err_bus_tmp:std_logic_vector(bytes-1 downto 0);
  begin

	if(rst_n = '0') then
	  rd_int   <= '0';
	  error    <= '0';
	  rd_err   <= '0';
	  code_err <= '0';
	  rd_err_bus   <= (others => '0');
	  code_err_bus <= (others => '0');
	  k_char   <= (others => '0');
	  data_out <= (others => '0');
	elsif (rst_n = '1') then
	  if(rising_edge(clk)) then
		if((init_rd_n = '0') AND (init_mode = 1)) then
		  tmp_rd  := init_rd_val;
		else
		  tmp_rd  := rd_int;
		end if;
		error_int    := '0';
		rd_err_int   := '0';
		code_err_int := '0';
		rd_err_bus_tmp := (others => '0');
		cd_err_bus_tmp := (others => '0');
		for byte_idx in bytes downto 1 loop
		  tmp_signal := decode_10b_to_8b_x_rd_in(
			    abcdeifghj => data_in(byte_idx*10-1 downto
					    (byte_idx-1)*10),
			    RD_in => tmp_rd,
			    k28_5_only => K28_5_only
			    );
		  data_out_int(byte_idx*8-1 downto (byte_idx-1)*8) :=
					    tmp_signal(11 downto 4);
		  tmp_rd       := tmp_signal(3);
		  error_int    := error_int OR tmp_signal(1) OR tmp_signal(2);
		  rd_err_int   := rd_err_int OR tmp_signal(1);
		  rd_err_bus_tmp(byte_idx-1) := tmp_signal(1);
		  code_err_int := code_err_int OR tmp_signal(2);
		  cd_err_bus_tmp(byte_idx-1) := tmp_signal(2);
		  k_char_int(byte_idx-1) := tmp_signal(0);
		end loop;
		error    <= error_int;
		rd_err   <= rd_err_int;
		code_err <= code_err_int;
		data_out <= data_out_int;
		k_char   <= k_char_int;
		rd_err_bus <= rd_err_bus_tmp;
		code_err_bus <= cd_err_bus_tmp;

		if((init_rd_n = '0') AND (init_mode = 0)) then
		  rd_int <= init_rd_val;
		elsif((init_rd_n = '1') OR (init_mode = 1)) then
		  rd_int <= tmp_rd;
		else
		  rd_int <= 'X';
		end if;

	  end if;

	else
	  rd_int <= 'X';
	  error <= 'X';
	  rd_err   <= 'X';
	  code_err <= 'X';
	  rd_err_bus   <= (others => 'X');
	  code_err_bus <= (others => 'X');
	  k_char <= (others => 'X');
	  data_out <= (others => 'X');
	end if;

  end process DECODER_TOP_LEVEL_AR_NE;
end generate;


GEN_RM_EQ_0_EM_NE_0 : if (rst_mode = 0) AND (en_mode /= 0) generate
  -- Asynch reset, with enable
  DECODER_TOP_LEVEL_AR_WE : process(clk, rst_n)
	variable tmp_rd :	std_logic;
	variable tmp_signal :	std_logic_vector(11 downto 0);
	variable error_int :	std_logic;
	variable rd_err_int :	std_logic;
	variable code_err_int :	std_logic;
	variable k_char_int :	std_logic_vector(bytes-1 downto 0);
	variable data_out_int : std_logic_vector(bytes*8-1 downto 0);
	variable rd_err_bus_tmp:std_logic_vector(bytes-1 downto 0);
	variable cd_err_bus_tmp:std_logic_vector(bytes-1 downto 0);
  begin

	if(rst_n = '0') then
	  rd_int   <= '0';
	  error    <= '0';
	  rd_err   <= '0';
	  code_err <= '0';
	  rd_err_bus   <= (others => '0');
	  code_err_bus <= (others => '0');
	  k_char   <= (others => '0');
	  data_out <= (others => '0');
	elsif (rst_n = '1') then
	  if(rising_edge(clk)) then
	      if (enable='1') then
		if((init_rd_n = '0') AND (init_mode = 1)) then
		  tmp_rd  := init_rd_val;
		else
		  tmp_rd  := rd_int;
		end if;
		error_int    := '0';
		rd_err_int   := '0';
		code_err_int := '0';
		rd_err_bus_tmp := (others => '0');
		cd_err_bus_tmp := (others => '0');
		for byte_idx in bytes downto 1 loop
		  tmp_signal := decode_10b_to_8b_x_rd_in(
			    abcdeifghj => data_in(byte_idx*10-1 downto
					    (byte_idx-1)*10),
			    RD_in => tmp_rd,
			    k28_5_only => K28_5_only
			    );
		  data_out_int(byte_idx*8-1 downto (byte_idx-1)*8) :=
					    tmp_signal(11 downto 4);
		  tmp_rd       := tmp_signal(3);
		  error_int    := error_int OR tmp_signal(1) OR tmp_signal(2);
		  rd_err_int   := rd_err_int OR tmp_signal(1);
		  rd_err_bus_tmp(byte_idx-1) := tmp_signal(1);
		  code_err_int := code_err_int OR tmp_signal(2);
		  cd_err_bus_tmp(byte_idx-1) := tmp_signal(2);
		  k_char_int(byte_idx-1) := tmp_signal(0);
		end loop;
		error    <= error_int;
		rd_err   <= rd_err_int;
		code_err <= code_err_int;
		data_out <= data_out_int;
		k_char   <= k_char_int;
		rd_err_bus <= rd_err_bus_tmp;
		code_err_bus <= cd_err_bus_tmp;

		if((init_rd_n = '0') AND (init_mode = 0)) then
		  rd_int <= init_rd_val;
		elsif((init_rd_n = '1') OR (init_mode = 1)) then
		  rd_int <= tmp_rd;
		else
		  rd_int <= 'X';
		end if;
	      end if;

	  end if;

	else
	  rd_int <= 'X';
	  error <= 'X';
	  rd_err   <= 'X';
	  code_err <= 'X';
	  rd_err_bus   <= (others => 'X');
	  code_err_bus <= (others => 'X');
	  k_char <= (others => 'X');
	  data_out <= (others => 'X');
	end if;

  end process DECODER_TOP_LEVEL_AR_WE;
end generate;


GEN_RM_NE_0_EM_EQ_0 : if (rst_mode /= 0) AND (en_mode = 0) generate
  -- Synch reset, no enable
  DECODER_TOP_LEVEL_SR_NE : process(clk)
	variable tmp_rd :	std_logic;
	variable tmp_signal :	std_logic_vector(11 downto 0);
	variable error_int :	std_logic;
	variable rd_err_int :	std_logic;
	variable code_err_int :	std_logic;
	variable k_char_int :	std_logic_vector(bytes-1 downto 0);
	variable data_out_int : std_logic_vector(bytes*8-1 downto 0);
	variable rd_err_bus_tmp:std_logic_vector(bytes-1 downto 0);
	variable cd_err_bus_tmp:std_logic_vector(bytes-1 downto 0);
  begin

	if(rising_edge(clk)) then
	  if(rst_n = '0') then
	    rd_int   <= '0';
	    error    <= '0';
	    rd_err   <= '0';
	    code_err <= '0';
	    rd_err_bus   <= (others => '0');
	    code_err_bus <= (others => '0');
	    k_char   <= (others => '0');
	    data_out <= (others => '0');
	  elsif (rst_n = '1') then
		if((init_rd_n = '0') AND (init_mode = 1)) then
		  tmp_rd  := init_rd_val;
		else
		  tmp_rd  := rd_int;
		end if;
		error_int    := '0';
		rd_err_int   := '0';
		code_err_int := '0';
		rd_err_bus_tmp := (others => '0');
		cd_err_bus_tmp := (others => '0');
		for byte_idx in bytes downto 1 loop
		  tmp_signal := decode_10b_to_8b_x_rd_in(
			    abcdeifghj => data_in(byte_idx*10-1 downto
					    (byte_idx-1)*10),
			    RD_in => tmp_rd,
			    k28_5_only => K28_5_only
			    );
		  data_out_int(byte_idx*8-1 downto (byte_idx-1)*8) :=
					    tmp_signal(11 downto 4);
		  tmp_rd       := tmp_signal(3);
		  error_int    := error_int OR tmp_signal(1) OR tmp_signal(2);
		  rd_err_int   := rd_err_int OR tmp_signal(1);
		  rd_err_bus_tmp(byte_idx-1) := tmp_signal(1);
		  code_err_int := code_err_int OR tmp_signal(2);
		  cd_err_bus_tmp(byte_idx-1) := tmp_signal(2);
		  k_char_int(byte_idx-1) := tmp_signal(0);
		end loop;
		error    <= error_int;
		rd_err   <= rd_err_int;
		code_err <= code_err_int;
		data_out <= data_out_int;
		k_char   <= k_char_int;
		rd_err_bus <= rd_err_bus_tmp;
		code_err_bus <= cd_err_bus_tmp;

		if((init_rd_n = '0') AND (init_mode = 0)) then
		  rd_int <= init_rd_val;
		elsif((init_rd_n = '1') OR (init_mode = 1)) then
		  rd_int <= tmp_rd;
		else
		  rd_int <= 'X';
		end if;

	    else
	      rd_int <= 'X';
	      error <= 'X';
	      rd_err   <= 'X';
	      code_err <= 'X';
	      rd_err_bus   <= (others => 'X');
	      code_err_bus <= (others => 'X');
	      k_char <= (others => 'X');
	      data_out <= (others => 'X');
	    end if;
	end if;

  end process DECODER_TOP_LEVEL_SR_NE;
end generate;


GEN_RM_NE_0_EM_NE_0 : if (rst_mode /= 0) AND (en_mode /= 0) generate
  -- Synch reset, with enable
  DECODER_TOP_LEVEL_SR_WE : process(clk)
	variable tmp_rd :	std_logic;
	variable tmp_signal :	std_logic_vector(11 downto 0);
	variable error_int :	std_logic;
	variable rd_err_int :	std_logic;
	variable code_err_int :	std_logic;
	variable k_char_int :	std_logic_vector(bytes-1 downto 0);
	variable data_out_int : std_logic_vector(bytes*8-1 downto 0);
	variable rd_err_bus_tmp:std_logic_vector(bytes-1 downto 0);
	variable cd_err_bus_tmp:std_logic_vector(bytes-1 downto 0);
  begin

	if(rising_edge(clk)) then
	  if(rst_n = '0') then
	    rd_int   <= '0';
	    error    <= '0';
	    rd_err   <= '0';
	    code_err <= '0';
	    rd_err_bus   <= (others => '0');
	    code_err_bus <= (others => '0');
	    k_char   <= (others => '0');
	    data_out <= (others => '0');
	  elsif (rst_n = '1') then
	      if (enable = '1') then
		if((init_rd_n = '0') AND (init_mode = 1)) then
		  tmp_rd  := init_rd_val;
		else
		  tmp_rd  := rd_int;
		end if;
		error_int    := '0';
		rd_err_int   := '0';
		code_err_int := '0';
		rd_err_bus_tmp := (others => '0');
		cd_err_bus_tmp := (others => '0');
		for byte_idx in bytes downto 1 loop
		  tmp_signal := decode_10b_to_8b_x_rd_in(
			    abcdeifghj => data_in(byte_idx*10-1 downto
					    (byte_idx-1)*10),
			    RD_in => tmp_rd,
			    k28_5_only => K28_5_only
			    );
		  data_out_int(byte_idx*8-1 downto (byte_idx-1)*8) :=
					    tmp_signal(11 downto 4);
		  tmp_rd       := tmp_signal(3);
		  error_int    := error_int OR tmp_signal(1) OR tmp_signal(2);
		  rd_err_int   := rd_err_int OR tmp_signal(1);
		  rd_err_bus_tmp(byte_idx-1) := tmp_signal(1);
		  code_err_int := code_err_int OR tmp_signal(2);
		  cd_err_bus_tmp(byte_idx-1) := tmp_signal(2);
		  k_char_int(byte_idx-1) := tmp_signal(0);
		end loop;
		error    <= error_int;
		rd_err   <= rd_err_int;
		code_err <= code_err_int;
		data_out <= data_out_int;
		k_char   <= k_char_int;
		rd_err_bus <= rd_err_bus_tmp;
		code_err_bus <= cd_err_bus_tmp;

		if((init_rd_n = '0') AND (init_mode = 0)) then
		  rd_int <= init_rd_val;
		elsif((init_rd_n = '1') OR (init_mode = 1)) then
		  rd_int <= tmp_rd;
		else
		  rd_int <= 'X';
		end if;
	      end if;

	    else
	      rd_int <= 'X';
	      error <= 'X';
	      rd_err   <= 'X';
	      code_err <= 'X';
	      rd_err_bus   <= (others => 'X');
	      code_err_bus <= (others => 'X');
	      k_char <= (others => 'X');
	      data_out <= (others => 'X');
	    end if;
	end if;

  end process DECODER_TOP_LEVEL_SR_WE;
end generate;

	rd <= rd_int;


  
  parameter_check : process
    variable param_err_flg : integer := 0;
  begin
    
  
    if ( (bytes < 1) OR (bytes > 16 ) ) then
      param_err_flg := 1;
      assert false
        report "ERROR: Invalid value for parameter bytes (legal range: 1 to 16 )"
        severity warning;
    end if;
  
    if ( (k28_5_only < 0) OR (k28_5_only > 1 ) ) then
      param_err_flg := 1;
      assert false
        report "ERROR: Invalid value for parameter k28_5_only (legal range: 0 to 1 )"
        severity warning;
    end if;
  
    if ( (en_mode < 0) OR (en_mode > 1 ) ) then
      param_err_flg := 1;
      assert false
        report "ERROR: Invalid value for parameter en_mode (legal range: 0 to 1 )"
        severity warning;
    end if;
  
    if ( (init_mode < 0) OR (init_mode > 1 ) ) then
      param_err_flg := 1;
      assert false
        report "ERROR: Invalid value for parameter init_mode (legal range: 0 to 1 )"
        severity warning;
    end if;
  
    if ( (rst_mode < 0) OR (rst_mode > 1 ) ) then
      param_err_flg := 1;
      assert false
        report "ERROR: Invalid value for parameter rst_mode (legal range: 0 to 1 )"
        severity warning;
    end if;
  
    if ( (op_iso_mode < 0) OR (op_iso_mode > 4 ) ) then
      param_err_flg := 1;
      assert false
        report "ERROR: Invalid value for parameter op_iso_mode (legal range: 0 to 4 )"
        severity warning;
    end if;
  
    assert param_err_flg = 0
      report "Simulation aborted due to invalid parameter value(s)" 
      severity failure;

    wait;

  end process parameter_check;

  
  clk_monitor  : process (clk) begin

    assert NOT (Is_X( clk ) AND (now > 0 ns)) 
      report "WARNING: Detected unknown value on the clock input port clk."
      severity warning;

  end process clk_monitor ;

-- pragma translate_on
end sim;
--------------------------------------------------------------------------------
-- auto generated configuration
-- pragma translate_off

configuration DW_8b10b_dec_cfg_sim of DW_8b10b_dec is
 for sim
 end for; -- sim
end DW_8b10b_dec_cfg_sim;
-- pragma translate_on
